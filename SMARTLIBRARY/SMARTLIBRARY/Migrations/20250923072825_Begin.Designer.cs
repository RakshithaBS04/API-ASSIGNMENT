// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SMARTLIBRARY.Data;

#nullable disable

namespace SMARTLIBRARY.Migrations
{
    [DbContext(typeof(SmartLibraryDbContext))]
    [Migration("20250923072825_Begin")]
    partial class Begin
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SMARTLIBRARY.Models.Book", b =>
                {
                    b.Property<string>("BookId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ISBN")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UploadedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("BookId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UploadedById");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            BookId = "B1",
                            Author = "Dr. Newton",
                            CategoryId = "C1",
                            FilePath = "/pdfs/books/physics.pdf",
                            ISBN = "123456789",
                            ImageUrl = "/Images/books/physics.png",
                            IsActive = true,
                            Title = "Physics Fundamentals",
                            UploadedAt = new DateTime(2025, 9, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UploadedById = "LIB001"
                        });
                });

            modelBuilder.Entity("SMARTLIBRARY.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("RecipientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("NotificationId");

                    b.HasIndex("RecipientId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new
                        {
                            NotificationId = 1,
                            CreatedAt = new DateTime(2025, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsRead = false,
                            Message = "Welcome to Smart Library System!",
                            RecipientId = "KAS001",
                            Title = "Welcome"
                        });
                });

            modelBuilder.Entity("SMARTLIBRARY.Models.PdfResource", b =>
                {
                    b.Property<string>("ResourceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ResourceType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UploadedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ResourceId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UploadedById");

                    b.ToTable("PdfResources");

                    b.HasData(
                        new
                        {
                            ResourceId = "R1",
                            CategoryId = "C2",
                            FilePath = "/pdfs/papers/ai_paper.pdf",
                            IsActive = true,
                            ResourceType = "IEEE Paper",
                            Title = "AI Research Paper",
                            UploadedAt = new DateTime(2025, 9, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UploadedById = "KAF001"
                        });
                });

            modelBuilder.Entity("SMARTLIBRARY.Models.ResourceAccessLog", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogId"));

                    b.Property<string>("AccessType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("AccessedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("BookId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ResourceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("LogId");

                    b.HasIndex("BookId");

                    b.HasIndex("ResourceId");

                    b.HasIndex("UserId");

                    b.ToTable("ResourceAccessLogs");
                });

            modelBuilder.Entity("SMARTLIBRARY.Models.ResourceCategory", b =>
                {
                    b.Property<string>("CategoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CategoryId");

                    b.ToTable("ResourceCategories");

                    b.HasData(
                        new
                        {
                            CategoryId = "C1",
                            Description = "Science related resources",
                            IsActive = true,
                            Name = "Science"
                        },
                        new
                        {
                            CategoryId = "C2",
                            Description = "Technology related resources",
                            IsActive = true,
                            Name = "Technology"
                        });
                });

            modelBuilder.Entity("SMARTLIBRARY.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            Description = "System administrator",
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleId = 2,
                            Description = "Manages library resources",
                            RoleName = "Librarian"
                        },
                        new
                        {
                            RoleId = 3,
                            Description = "Student user",
                            RoleName = "Student"
                        },
                        new
                        {
                            RoleId = 4,
                            Description = "Faculty user",
                            RoleName = "Faculty"
                        });
                });

            modelBuilder.Entity("SMARTLIBRARY.Models.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = "ADM001",
                            CreatedAt = new DateTime(2025, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@smartlib.com",
                            FullName = "Super Admin",
                            ImageUrl = "/Images/admin.jpg",
                            IsActive = true,
                            Password = "admin123",
                            RoleId = 1
                        },
                        new
                        {
                            UserId = "LIB001",
                            CreatedAt = new DateTime(2025, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "librarian@smartlib.com",
                            FullName = "Main Librarian",
                            ImageUrl = "/Images/librarian.png",
                            IsActive = true,
                            Password = "lib123",
                            RoleId = 2
                        },
                        new
                        {
                            UserId = "KAS001",
                            CreatedAt = new DateTime(2025, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "student@smartlib.com",
                            FullName = "Test Student",
                            ImageUrl = "/Images/student.png",
                            IsActive = true,
                            Password = "stud123",
                            RoleId = 3
                        },
                        new
                        {
                            UserId = "KAF001",
                            CreatedAt = new DateTime(2025, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "faculty@smartlib.com",
                            FullName = "Test Faculty",
                            ImageUrl = "/Images/faculty.jpg",
                            IsActive = true,
                            Password = "fac123",
                            RoleId = 4
                        });
                });

            modelBuilder.Entity("SMARTLIBRARY.Models.Book", b =>
                {
                    b.HasOne("SMARTLIBRARY.Models.ResourceCategory", "Category")
                        .WithMany("Books")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SMARTLIBRARY.Models.User", "UploadedBy")
                        .WithMany("UploadedBooks")
                        .HasForeignKey("UploadedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("UploadedBy");
                });

            modelBuilder.Entity("SMARTLIBRARY.Models.Notification", b =>
                {
                    b.HasOne("SMARTLIBRARY.Models.User", "Recipient")
                        .WithMany("Notifications")
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipient");
                });

            modelBuilder.Entity("SMARTLIBRARY.Models.PdfResource", b =>
                {
                    b.HasOne("SMARTLIBRARY.Models.ResourceCategory", "Category")
                        .WithMany("PdfResources")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SMARTLIBRARY.Models.User", "UploadedBy")
                        .WithMany("UploadedPdfs")
                        .HasForeignKey("UploadedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("UploadedBy");
                });

            modelBuilder.Entity("SMARTLIBRARY.Models.ResourceAccessLog", b =>
                {
                    b.HasOne("SMARTLIBRARY.Models.Book", "Book")
                        .WithMany("AccessLogs")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SMARTLIBRARY.Models.PdfResource", "PdfResource")
                        .WithMany("AccessLogs")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SMARTLIBRARY.Models.User", "User")
                        .WithMany("AccessLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("PdfResource");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SMARTLIBRARY.Models.User", b =>
                {
                    b.HasOne("SMARTLIBRARY.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SMARTLIBRARY.Models.Book", b =>
                {
                    b.Navigation("AccessLogs");
                });

            modelBuilder.Entity("SMARTLIBRARY.Models.PdfResource", b =>
                {
                    b.Navigation("AccessLogs");
                });

            modelBuilder.Entity("SMARTLIBRARY.Models.ResourceCategory", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("PdfResources");
                });

            modelBuilder.Entity("SMARTLIBRARY.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("SMARTLIBRARY.Models.User", b =>
                {
                    b.Navigation("AccessLogs");

                    b.Navigation("Notifications");

                    b.Navigation("UploadedBooks");

                    b.Navigation("UploadedPdfs");
                });
#pragma warning restore 612, 618
        }
    }
}
